/*
 * Copyright (c)  2024 kamillion-suite contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @since 25.08.2024
 */

package org.kamillion.hateoflux.model.hal;

import org.kamillion.hateoflux.linkbuilder.SpringControllerLinkBuilder;
import org.springframework.web.bind.annotation.RequestParam;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Annotation to be used in combination with {@link RequestParam} to indicate that collection-based parameters should
 * be rendered as composite values in URLs. This is the inverse behavior of the Spring's {@code @NonComposite}
 * annotation.
 * <p>
 * While {@code NonComposite} directs the rendering of parameters as a single entry (e.g.,
 * {@code param=value1,value2,value3}), {@link Composite} specifies that each element of the collection should be
 * represented as a separate parameter entry in the URL (e.g., {@code param=value1&param=value2&param=value3}). This
 * approach is typically used when generating links pointing to controller methods and ensures that each value is
 * distinctly represented as a separate query parameter.
 * <p>
 * Usage of this annotation affects only how links are generated by the {@link SpringControllerLinkBuilder} and does
 * not influence how data is parsed or handled within controller methods.
 *
 * @author Younes El Ouarti
 */
@Target(ElementType.PARAMETER)
@Retention(RetentionPolicy.RUNTIME)
public @interface Composite {
}
